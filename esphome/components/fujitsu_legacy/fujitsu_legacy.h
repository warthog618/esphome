#pragma once

#include "esphome/core/log.h"
#include "esphome/core/component.h"
#include "esphome/core/automation.h"
#include "esphome/components/climate_ir/climate_ir.h"

namespace esphome {
namespace fujitsu_legacy {

const uint8_t FUJITSU_LEGACY_TEMP_MIN = 16;  // Celsius (heat)
const uint8_t FUJITSU_LEGACY_TEMP_MAX = 30;  // Celsius

// clang-format off
/**
 * ```
 *                               marker        cmd   len      temp                        checksum
 * temperatures      |                       |  |     |        |                             |
 * auto auto 18      0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x00 0x00 0x00 0x00 0x00 0xb0
 * auto auto 19      0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x30 0x00 0x00 0x00 0x00 0x00 0xa0
 * auto auto 30      0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0xe0 0x00 0x00 0x00 0x00 0x00 0xf0
 *
 *                                                           turn on
 * on flag:                                                     |
 * on at 16          0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x01 0x04 0x00 0x00 0x00 0x00 0xcb
 * down to 16        0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x00 0x04 0x00 0x00 0x00 0x00 0xcc
 *
 *                                                           temp   mode
 * master control:                                             |     |
 * auto auto 30      0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0xe0 0x00 0x00 0x00 0x00 0x00 0xf0
 * cool auto 18      0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x01 0x00 0x00 0x00 0x00 0xaf
 * dry auto 18       0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x02 0x00 0x00 0x00 0x00 0xae
 * fan (auto) (18)   0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x03 0x00 0x00 0x00 0x00 0xad
 * heat auto 18      0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x04 0x00 0x00 0x00 0x00 0xac
 *
 *                                                                       fan
 * fan options:                                                           |
 * heat 18 auto      0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x04 0x00 0x00 0x00 0x00 0xac
 * heat 18 high      0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x04 0x01 0x00 0x00 0x00 0xab
 * heat 18 med       0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x04 0x02 0x00 0x00 0x00 0xaa
 * heat 18 low       0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x04 0x03 0x00 0x00 0x00 0xa9
 * heat 18 quiet     0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x20 0x04 0x04 0x00 0x00 0x00 0xa8
 *
 *                                              cmd
 * swing options:                                |
 * swing louver       0x14 0x63 0x00 0x10 0x10 0x6d
 * air flow direction 0x14 0x63 0x00 0x10 0x10 0x6c
 *                                                              timer mode   off time  on time
 * timer options:                                                   |         |         |
 * sleep 1:05        0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x80 0x11 0x00 0x41 0x08 0x00 0xf6
 * timer off 0:25    0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x80 0x21 0x00 0x40 0x08 0x00 0xe7
 * timer on 6:00     0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x80 0x31 0x00 0x00 0xe0 0x98 0xa7
 * off->on           0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x80 0x41 0x00 0x3f 0xe8 0x18 0xd0
 * timer reset       0x14 0x63 0x00 0x10 0x10 0xfc 0x08 0x30 0x80 0x01 0x00 0x00 0x00 0x00 0x4f
 *
 * sleep time in minutes
 * timer modes not used - just for reference
 *
 * checksum calculated from len to end, summing to 0x00.
 * ```
 */
// clang-format on

class FujitsuLegacyClimate : public climate_ir::ClimateIR {
 public:
  FujitsuLegacyClimate()
      : ClimateIR(FUJITSU_LEGACY_TEMP_MIN, FUJITSU_LEGACY_TEMP_MAX, 1.0f, true, true,
                  {climate::CLIMATE_FAN_AUTO, climate::CLIMATE_FAN_LOW, climate::CLIMATE_FAN_MEDIUM,
                   climate::CLIMATE_FAN_HIGH, climate::CLIMATE_FAN_QUIET},
                  {climate::CLIMATE_SWING_OFF, climate::CLIMATE_SWING_VERTICAL}) {}

 protected:
  /// Transmit the state of this climate controller via IR.
  void transmit_state() override;
  /// Transmit power off command via IR.
  void transmit_off_();
  /// Transmit swing louver command via IR.
  void transmit_swing_();

  /// Transmit a basic command via IR.
  void transmit_cmd_(uint8_t cmd);

  /// Override control to change settings of the climate device.
  void control(const climate::ClimateCall &call) override;

  /// Parse incoming message
  bool on_receive(remote_base::RemoteReceiveData data) override;

  /// Transmit message as IR pulses
  void transmit_(uint8_t const *message, uint8_t length);

  /// Calculate checksum for a state message
  uint8_t checksum_state_(uint8_t const *message);

  // true if currently on - fujitsus transmit an on flag on when the remote moves from off to on
  bool power_{false};
};

}  // namespace fujitsu_legacy
}  // namespace esphome
